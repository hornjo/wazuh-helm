## @param nameOverride String to partially override the names of the components.
##
nameOverride: null
## @param fullnameOverride String to fully override the fullname of the components.
##
fullnameOverride: null
## @param autoreload if enabled annotations will be added to recreated the statefulset on config
## changes.
autoreload:
  enabled: false

## @section cert-manager This are the parameters for the official sub-chart for cert-manager, here you
## can set all available values of the official Chart. 
## Ref: https://github.com/cert-manager/cert-manager/blob/master/deploy/charts/cert-manager/values.yaml
##
cert-manager:
  ## @param cert-manager.enabled this enabled or disables the sub-chart getting deployed.
  ##
  enabled: false
## @section certificates If cert-manager is present, the certificates can be generated automatically.
##
certificates:
  ## @param certificates.issuer possible configs for the issuer.
  ##
  issuer:
    ## @param certificates.issuer.name of the issuer used for signing the certificates. If this is null
    ## a new selfsigned issuer will be created with the chart.
    ##
    name: null
    ## @param certificates.issuer.type defines the type of the issuer, possible values are issuer and
    ## ClusterIssuer.
    ##
    type: issuer
  ## @param certificates.duration timeframe for validity of cert.
  ##
  duration: 2160h # 90d
  ## @param certificates.renewBefore timeframe before the cert gets renewed.
  ##
  renewBefore: 360h # 15d
  ## @param certificates.subject details mentioned in the certificate.
  ##
  subject:
    organization: Company
    country: US
    locality: California
## @section indexer configuration of the wazuh indexer.
##
indexer:
  ## @param indexer.replicas number of replicas used in statefulset.
  ##
  replicas: 3
  ## @param indexer.annotations additional annotations set on statefulset.
  ##
  annotations: {}
  ## @param indexer.updateStrategy updateStrategy for the statefulset.
  ##
  updateStrategy: RollingUpdate
  ## @params indexer.images parameters for the image of the indexer.
  ##
  images:
    ## @param indexer.images.repository name of the image used. If you use your own image registry
    ## just enter the url for the image. E.g.: my.registry.de/registry/wazuh/wazuh-indexer
    ##
    repository: wazuh/wazuh-indexer
    ## @param indexer.images.tag Tag of the image.
    ## @param indexer.images.pullPolicy pullPolicy of the image.
    ##
    tag: "4.11.1"
    pullPolicy: IfNotPresent
    ## TODO: rework imagePullSecrets
    imagePullSecrets:
      enabled: false
      secret: {}
  ## @params indexer.resources Allows to configure the resources allocated to the indexer.
  ## Ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ##
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  ## @params indexer.pdb Allows to configure the pod disruption budget of the indexer.
  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  pdb:
    enabled: true
    maxUnavailable: 1
  ## @params indexer.livenessProbe Parameter to configure the livenessProbe.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  ##
  livenessProbe:
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 1
    initialDelaySeconds: 10
    tcpSocket:
      port: 9200
  ## @params indexer.readinessProbe Parameter to configure the readinessProbe.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  ##
  readinessProbe:
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 1
    initialDelaySeconds: 10
    tcpSocket:
      port: 9200
  ## @params indexer.securityContext Parameter to configure the securityContext of the pod.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## TODO Pod and container security Contexts
  securityContext:
    fsGroup: 1000
  ## @params indexer.networkPolicy Network Policies for restricting the traffic in the cluster.
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    enabled: true
  ## @params indexer.service settings for svc resource.
  ##
  service:
    type: ClusterIP
    annotations: {}
    httpPort: 9200
    nodes: 9300
    metrics: 9600
  ## @params indexer.nodeSelector
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ## Example: nodeSelector: { kubernetes.io/arch: amd64 }
  ##
  nodeSelector: {}
  ## @params indexer.additionalEnv Possibility to define additional env vars in the pod.
  ## Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  additionalEnv: []
  ## @params indexer.config Configuration of the indexer parameters, this should not be changed.
  ##
  config:
    opensearch: |-
      {{ include "wazuh.indexer.opensearchConfig" . }}
    internalUsers: |-
      {{ include "wazuh.indexer.internalUsers" . }}
    securityConfig: |-
      {{ include "wazuh.indexer.securityConfig" . }}
    rolesMapping: |-
      {{ include "wazuh.indexer.rolesMapping" . }}
    roles: |-
      {{ include "wazuh.indexer.roles" . }}
  ## @params indexer.sysctlImage
  ##
  sysctlImage:
    ## @param indexer.sysctlImage.enabled Enable kernel settings modifier image
    ##
    enabled: false
    ## @params indexer.sysctlImage.images parameters for the image of the indexer.
    ##
    images:
      ## @param indexer.sysctlImage.images.repository name of the image used. If you use your own image registry
      ## just enter the url for the image. E.g.: my.registry.de/registry/wazuh/wazuh-indexer
      ##
      repository: bitnami/os-shell
      ## @param indexer.sysctlImage.images.tag Tag of the image.
      ## @param indexer.sysctlImage.images.pullPolicy pullPolicy of the image.
      ##
      tag: 12-debian-12-r43
  ## @params indexer.env Configuration of the indexer env vars, this should be only changed if needed.
  ##
  env:
    OPENSEARCH_JAVA_OPTS: "-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true"
    CLUSTER_NAME: "wazuh"
    NETWORK_HOST: "0.0.0.0"
    DISABLE_INSTALL_DEMO_CONFIG: "true"
  ## @param indexer.storageSize Defines the size of the pvc used by the statefulset.
  ##
  storageSize: 50Gi
  ## @param indexer.storageClass Defines the storageClass of the pvc used by the statefulset.
  ##
  storageClass: null
  ## @params indexer.cred Configuration of the credentials for the indexer. 
  ##
  cred:
    existingSecret: ""
    username: "admin"
    password: "SecretPassword"
## @section indexer configuration of the wazuh dashboard. Kibana for elasticsearch with Wazuh plugins
## pre-installed
##
dashboard:
  ## @param dashboard.replicas number of replicas used in deployment.
  ##
  replicas: 1
  ## @param dashboard.annotations additional annotations set on deployment.
  ##
  annotations: {}
  ## @params dashboard.images parameters for the image of the dashboard.
  ##
  images:
    ## @param dashboard.images.repository name of the image used. If you use your own image registry
    ## just enter the url for the image. E.g.: my.registry.de/registry/wazuh/wazuh-dashboard
    ##
    repository: wazuh/wazuh-dashboard
    ## @param dashboard.images.tag Tag of the image.
    ## @param dashboard.images.pullPolicy pullPolicy of the image.
    ## @param dashboard.images.updateStrategy updateStrategy of the image.
    ##
    tag: "4.11.1"
    pullPolicy: IfNotPresent
    updateStrategy: OnDelete
  ## @params dashboard.resources Allows to configure the resources allocated to the dashboard.
  ## Ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ##
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  ## @params dashboard.pdb Allows to configure the pod disruption budget of the dashboard.
  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  pdb:
    enabled: false
    maxUnavailable: 1
  ## @params dashboard.livenessProbe Parameter to configure the livenessProbe.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  ##
  livenessProbe:
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 1
    initialDelaySeconds: 10
    httpGet:
      path: /api/status
      port: 5601
  ## @params dashboard.readinessProbe Parameter to configure the readinessProbe.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  ##
  readinessProbe:
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 1
    initialDelaySeconds: 10
    httpGet:
      path: /api/status
      port: 5601
  ## @params dashboard.securityContext Parameter to configure the securityContext of the pod.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext: {}
  ## @params dashboard.networkPolicy Network Policies for restricting the traffic in the cluster.
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    enabled: true
  ## @params dashboard.nodeSelector
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ## Example: nodeSelector: { kubernetes.io/arch: amd64 }
  ##
  nodeSelector: {}
  ## @params dashboard.service settings for svc resource.
  ##
  service:
    annotations: {}
    httpPort: 5601
    type: ClusterIP
  ## @param dashboard.enable_ssl with this you will be able to access kibana on http port instead of
  ## https if you use Ambassador edge stack this is necessary because with `true` route will close
  ## unexpectedly when accessing via ambassador external url
  ##
  enable_ssl: false
  ## @params dashboard.additionalEnv Possibility to define additional env vars in the pod.
  ## Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  additionalEnv: []
  ## @params dashboard.config Configuration of the dashboard parameters, this should not be changed.
  ##
  config: |
    {{ include "wazuh.dashboard.config" . }}
  ## @params indexer.cred Configuration of the credentials for the indexer. 
  ##
  cred:
    existingSecret: ""
    username: "kibanaserver"
    password: "kibanaserver"
  ## @param dashboard.ingress Ingress parameters for the dashboard
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param dashboard.ingress.enabled Defines if the ingress is used.
    ##
    enabled: false
    ## @param dashboard.ingress.className Defines the ingress class name used.
    ##
    className: ""
    ## @param dashboard.ingress.tls Allows to use specific tls certificate.
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## Example:
    ##  - secretName: wazuh-tls
    ##    hosts:
    ##      - wazuh.example.com
    ##
    tls: []
    ## @param dashboard.ingress.annotations Used for detailed configuration.
    ## Ref: https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/advanced-configuration-with-annotations/
    ## Eg: cert-manager.io/cluster-issuer: letsencrypt-prod
    ##
    annotations: {}
    ## @params dashboard.ingress.host Defines the hostname and URL under which the dashboard gets
    ## exposed.
    ##
    host: "wazuh.example.com"
## @section wazuh configuration of the wazuh core component.
##
wazuh:
  ## @param wazuh.syslog_enable Enables the syslog of the wazuh instance.
  ##
  syslog_enable: true
  ## @param wazuh.key Defines the key of the wazuh cluster.
  ##
  key: "c98b62a9b6169ac5f67dae55ae4a9088"
  ## @params wazuh.images parameters for the image of the indexer.
  ##
  images:
    ## @param wazuh.images.repository name of the image used. If you use your own image registry
    ## just enter the url for the image. E.g.: my.registry.de/registry/wazuh/wazuh-manager
    ##
    repository: wazuh/wazuh-manager
    ## @param wazuh.images.tag Tag of the image.
    ## @param wazuh.images.pullPolicy pullPolicy of the image.
    ##
    tag: "4.11.1"
    pullPolicy: IfNotPresent
    ## TODO: rework imagePullSecrets
    pullSecret: regcred
  ## @params wazuh.nodeSelector
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ## Example: nodeSelector: { kubernetes.io/arch: amd64 }
  ##
  nodeSelector: {}
  ## @params wazuh.service settings for svc resource.
  ##
  service:
    annotations: {}
    port: 1516
  ## @params wazuh.env Configuration of the indexer env vars, this should be only changed if needed.
  ##
  env:
    FILEBEAT_SSL_VERIFICATION_MODE: full
  ## @params wazuh.apiCred Configuration of the api credentials. You have 3 possible options to set
  ## the credentials:
  ## 1. Set existing secret name
  ## 2. Set username and password manually
  ## 3. Let secret be generated automatically (all empty)
  ##
  apiCred:
    ## @param wazuh.apiCred.existingSecret name of the existingSecret in the namespace.
    ##
    existingSecret: ""
    ## @param wazuh.apiCred.username name of the username.
    ##
    username: "wazuh-wui"
    ## @param wazuh.apiCred.password password of the user. Note that the password must have a length
    ## between 8 and 64 characters and contain at least one upper and lower case letter, a number
    ## and a symbol(.*+?-).
    ##
    password: "MyS3cr37P450r.*-"
  ## @params wazuh.authd Parameters to the authd service.
  ##
  authd:
    ## @param wazuh.authd.existingSecret name of the existingSecret in the namespace.
    ## @param wazuh.apiCred.pass password of the authd.
    ##
    existingSecret: ""
    pass: "password"
  ## @params wazuh.initContainer.resources Parameters for the resources of the initContainer.
  ##
  initContainer:
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
  ## @params wazuh.localDecoder Configuration of the local decoder.
  ##
  localDecoder: |
    {{ include "wazuh.localDecoder" . }}
  ## @params wazuh.localRules Configuration of the local rules.
  ##
  localRules: |
    {{ include "wazuh.localRules" . }}
  ## @params wazuh.internalOptions Configuration of the internal option.
  ##
  internalOptions: |
    {{ include "wazuh.internalOptions" . }}
  ## @params wazuh.agentGroupConf Configuration of the agent group.
  ##
  agentGroupConf:
    - name: example
      agent: |
        <agent_config>
          <localfile>
            <location>journald</location>
            <log_format>journald</log_format>
          </localfile>
          <localfile>
            <location>/var/log/falco.log</location>
            <log_format>json</log_format>
          </localfile>
          <wodle name="docker-listener">
            <interval>10m</interval>
            <attempts>5</attempts>
            <run_on_start>no</run_on_start>
            <disabled>no</disabled>
          </wodle>
        </agent_config>
  ## @section wazuh.master configuration of the wazuh master component.
  ##
  master:
    ## @param wazuh.master.annotations additional annotations set on statefulset.
    ##
    annotations: {}
    ## @params wazuh.master.service settings for svc resource.
    ##
    service:
      type: ClusterIP
      annotations: {}
      ports:
        registration: 1515
        api: 55000
    ## @params wazuh.master.ingress Parameters for the ingress routes to the master.
    ##
    ingress:
      ## @params wazuh.master.ingress.api Parameters for the ingress routes to the api.
      ##
      api:
        ## @param wazuh.master.ingress.api.enabled Defines if the ingress is used.
        ##
        enabled: false
        ## @param wazuh.master.ingress.api.className Defines the ingress class name used.
        ##
        className: ""
        ## @param wazuh.master.ingress.api.tls Allows to use specific tls certificate.
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
        ## Example:
        ##  - secretName: wazuh-api-tls
        ##    hosts:
        ##      - api.wazuh.example.com
        ##
        tls: []
        ## @param wazuh.master.ingress.api.annotations Used for detailed configuration.
        ## Ref: https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/advanced-configuration-with-annotations/
        ## Eg: cert-manager.io/cluster-issuer: letsencrypt-prod
        ##
        annotations: {}
        ## @params wazuh.master.ingress.api.host Defines the hostname and URL under which the dashboard gets
        ## exposed.
        ##
        host: "api.wazuh.example.com"
      ## @params wazuh.master.ingress.registration Parameters for the ingress routes to the registration.
      ##
      registration:
        ## @param wazuh.master.ingress.registration.enabled Defines if the ingress is used.
        ##
        enabled: false
        ## @param wazuh.master.ingress.registration.className Defines the ingress class name used.
        ##
        className: ""
        ## @param wazuh.master.ingress.registration.tls Allows to use specific tls certificate.
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
        ## Example:
        ##  - secretName: wazuh-registration-tls
        ##    hosts:
        ##      - registration.wazuh.example.com
        ##
        tls: []
        ## @param wazuh.master.ingress.registration.annotations Used for detailed configuration.
        ## Ref: https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/advanced-configuration-with-annotations/
        ## Eg: cert-manager.io/cluster-issuer: letsencrypt-prod
        ##
        annotations: {}
        ## @params wazuh.master.ingress.registration.host Defines the hostname and URL under which the dashboard gets
        ## exposed.
        ##
        host: "registration.wazuh.example.com"
    ## @params wazuh.master.resources Allows to configure the resources allocated to the master.
    ## Ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ##
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    ## @params wazuh.master.livenessProbe Parameter to configure the livenessProbe.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## TODO
    livenessProbe: {}
    ## @params wazuh.master.readinessProbe Parameter to configure the readinessProbe.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## TODO
    readinessProbe: {}
    ## @params wazuh.master.securityContext Parameter to configure the securityContext of the pod.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    securityContext:
      capabilities:
        add: ["SYS_CHROOT"]
    ## @params wazuh.master.networkPolicy Network Policies for restricting the traffic in the cluster.
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
    ##
    networkPolicy:
      enabled: true
    ## @param wazuh.master.storageSize Defines the size of the pvc used by the statefulset.
    ##
    storageSize: 50Gi
    ## @param wazuh.master.storageClass Defines the storageClass of the pvc used by the
    ## statefulset. If undefined (the default) or set to null, no storageClassName spec is set,
    ## choosing the default provisioner.
    ##
    storageClass: null
    ## @param wazuh.master.conf Config for the wazuh master, do not change!
    ##
    conf: |
      {{ include "wazuh.master.conf" . }}
    ## @param wazuh.master.extraConf Gets appended to the wazuh.master.conf.
    ##
    extraConf: ""
  ## @section wazuh.worker configuration of the wazuh worker component.
  ##
  worker:
    ## @param wazuh.worker.replicas number of replicas used in statefulset.
    ##
    replicas: 2
    ## @param wazuh.worker.annotations additional annotations set on deployment.
    ##
    annotations: {}
    ## @params wazuh.worker.service settings for svc resource.
    ##
    service:
      type: ClusterIP
      annotations: {}
      ports:
        agentEvents: 1514
    ## @params wazuh.worker.ingress Parameters for the ingress routes to the worker.
    ##
    ingress:
      ## @param wazuh.worker.ingress.enabled Defines if the ingress is used.
      ##
      enabled: false
      ## @param wazuh.worker.ingress.className Defines the ingress class name used.
      ##
      className: ""
      ## @param wazuh.worker.ingress.tls Allows to use specific tls certificate.
      ## Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
      ## Example:
      ##  - secretName: wazuh-manager-tls
      ##    hosts:
      ##      - manager.wazuh.example.com
      ##
      tls: []
      ## @param wazuh.worker.ingress.annotations Used for detailed configuration.
      ## Ref: https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/advanced-configuration-with-annotations/
      ## Eg: cert-manager.io/cluster-issuer: letsencrypt-prod
      ##
      annotations: {}
      ## @params wazuh.worker.ingress.host Defines the hostname and URL under which the dashboard gets
      ## exposed.
      ##
      host: "manager.wazuh.example.com"
    ## @params wazuh.worker.resources Allows to configure the resources allocated to the worker.
    ## Ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ##
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    ## @params wazuh.worker.pdb Allows to configure the pod disruption budget of the worker.
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      enabled: true
      maxUnavailable: 1
    ## @params wazuh.worker.livenessProbe Parameter to configure the livenessProbe.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## TODO
    livenessProbe: {}
    ## @params wazuh.worker.readinessProbe Parameter to configure the readinessProbe.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## TODO
    readinessProbe: {}
    ## @params wazuh.worker.securityContext Parameter to configure the securityContext of the pod.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    securityContext:
      capabilities:
        add: ["SYS_CHROOT"]
    ## @params wazuh.worker.networkPolicy Network Policies for restricting the traffic in the cluster.
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
    ##
    networkPolicy:
      enabled: true
    ## @param wazuh.worker.storageSize Defines the size of the pvc used by the statefulset.
    ##
    storageSize: 50Gi
    ## @param wazuh.worker.storageClass Defines the storageClass of the pvc used by the statefulset.
    ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.
    ##
    storageClass: null
    ## @param wazuh.worker.conf Config for the wazuh worker, do not change!
    ##
    conf: |
      {{ include "wazuh.worker.conf" . }}
    ## @param wazuh.worker.extraConf Gets appended to the wazuh.worker.conf.
    ##
    extraConf: ""
